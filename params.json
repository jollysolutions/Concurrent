{"name":"Concurrent","tagline":"Distributed task system based on ZeroMQ and a trac [by Edgewall] like component architecture","body":"# Overview #\r\nConcurrent aims to be a different type of task distribution system compared to what MPI like system do. It adds a simple but powerful application abstraction layer to distribute the logic of an entire application onto a swarm of clusters holding similarities with volunteer computing systems.\r\n\r\nTraditional task distributed systems will just perform simple tasks onto the distributed system and wait for results. Concurrent goes one step further by letting the tasks and the application decide what to do. The programming paradigm is then totally async without any waits for results and based on notifications once a computation has been performed.\r\n\r\n# Usage #\r\n\r\n# Install #\r\nThe easiest way to install concurrent is to download it's source package and just install it using pythons disctools:\r\n\r\n    python setup.py build_ext\r\n    python setup.py install\r\n\r\nMake sure to have the python development headers installed, you also require a valid C compiler (See Setup section)\r\n\r\n# Contribute #\r\n\r\nDocumentation suing sphinx, execute the generate_api.sh script\r\n\r\nmake sure all cython modules are compiled, if not the documentation process will fail!\r\n\r\n# Setup #\r\n\r\n * C compiler (GCC, VS, Clang, ...)\r\n * Python dev headers\r\n * sqlalchemy\r\n * setuptools\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}